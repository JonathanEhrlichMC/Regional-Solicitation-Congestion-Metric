ungroup() %>%
filter(avg_spd == min_spd)
View(congestion_wkday)
congestion_wkday %>%
ggplot(aes(day_part_desc)) +
geom_bar()
congestion_wkday %>%
ggplot(aes(day_part_desc)) +
geom_bar() +
coord_flip()
# Select min speed for weekdays
congestion_wkday <- congestion_tidy %>%
filter(day_type_code == 1 & & day_part_code != "00" & day_part_code != "02" & day_part_code != "09" & day_part_code != "19") %>% # Don't include all day, off-peak, peak AM, or peak PM
# Select min speed for weekdays
congestion_wkday <- congestion_tidy %>%
filter(day_type_code == 1 & day_part_code != "00" & day_part_code != "02" & day_part_code != "09" & day_part_code != "19") %>% # Don't include all day, off-peak, peak AM, or peak PM
group_by(id) %>%
mutate(min_spd = min(avg_spd)) %>%
ungroup() %>%
filter(avg_spd == min_spd) # Note that some segments have multiple hours with the same speed that is the min - will cause duplicates
congestion_wkday %>%
ggplot(aes(day_part_desc)) +
geom_bar() +
coord_flip()
# Select relevant variables & rename to names that are more convenient to work with; create day_type_code and day_part_code variables so it's not necessary to type out entire descripter when filtering
congestion_tidy <- congestion %>%
dplyr::select(`Zone ID`, `Day Type`, `Day Part`, `Avg All Segment Speed (mph)`) %>%
rename(id = `Zone ID`,
day_type = `Day Type`,
day_part = `Day Part`,
avg_spd = `Avg All Segment Speed (mph)`) %>%
separate(day_type, into = c("day_type_code", "day_type_desc"), sep = 1) %>%
mutate(day_type = str_replace(day_type, pattern = ": ", replacement = "")) %>%
separate(day_part, into = c("day_part_code", "day_part_desc"), sep = 2)
# Select relevant variables & rename to names that are more convenient to work with; create day_type_code and day_part_code variables so it's not necessary to type out entire descripter when filtering
congestion_tidy <- congestion %>%
dplyr::select(`Zone ID`, `Day Type`, `Day Part`, `Avg All Segment Speed (mph)`) %>%
rename(id = `Zone ID`,
day_type = `Day Type`,
day_part = `Day Part`,
avg_spd = `Avg All Segment Speed (mph)`) %>%
separate(day_type, into = c("day_type_code", "day_type_desc"), sep = 1) %>%
mutate(day_type_desc = str_replace(day_type_desc, pattern = ": ", replacement = "")) %>%
separate(day_part, into = c("day_part_code", "day_part_desc"), sep = 2)
# Select min speed for weekdays
congestion_wkday <- congestion_tidy %>%
filter(day_type_code == 1 & day_part_code != "00" & day_part_code != "02" & day_part_code != "09" & day_part_code != "19") %>% # Don't include all day, off-peak, peak AM, or peak PM
group_by(id) %>%
mutate(min_spd = min(avg_spd)) %>%
ungroup() %>%
filter(avg_spd == min_spd) # Note that some segments have multiple hours with the same speed that is the min - will cause duplicates
congestion_wkday %>%
ggplot(aes(day_part_desc)) +
geom_bar() +
coord_flip()
View(congestion_tidy)
# Select relevant variables & rename to names that are more convenient to work with; create day_type_code and day_part_code variables so it's not necessary to type out entire descripter when filtering
congestion_tidy <- congestion %>%
dplyr::select(`Zone ID`, `Day Type`, `Day Part`, `Avg All Segment Speed (mph)`) %>%
rename(id = `Zone ID`,
day_type = `Day Type`,
day_part = `Day Part`,
avg_spd = `Avg All Segment Speed (mph)`) %>%
separate(day_type, into = c("day_type_code", "day_type_desc"), sep = 1) %>%
separate(day_part, into = c("day_part_code", "day_part_desc"), sep = 2) %>%
mutate(day_part_desc = str_replace(day_part_desc, pattern = ": ", replacement = ""))
# Select min speed for weekdays
congestion_wkday <- congestion_tidy %>%
filter(day_type_code == 1 & day_part_code != "00" & day_part_code != "02" & day_part_code != "09" & day_part_code != "19") %>% # Don't include all day, off-peak, peak AM, or peak PM
group_by(id) %>%
mutate(min_spd = min(avg_spd)) %>%
ungroup() %>%
filter(avg_spd == min_spd) # Note that some segments have multiple hours with the same speed that is the min - will cause duplicates
# Select relevant variables & rename to names that are more convenient to work with; create day_type_code and day_part_code variables so it's not necessary to type out entire descripter when filtering
congestion_tidy <- congestion %>%
dplyr::select(`Zone ID`, `Day Type`, `Day Part`, `Avg All Segment Speed (mph)`) %>%
rename(id = `Zone ID`,
day_type = `Day Type`,
day_part = `Day Part`,
avg_spd = `Avg All Segment Speed (mph)`) %>%
separate(day_type, into = c("day_type_code", "day_type_desc"), sep = 1) %>%
separate(day_part, into = c("day_part_code", "day_part_desc"), sep = 2) %>%
mutate(day_type_desc = str_replace(day_type_desc, pattern = ": ", replacement = ""),
day_part_desc = str_replace(day_part_desc, pattern = ": ", replacement = ""))
# Select min speed for weekdays
congestion_wkday <- congestion_tidy %>%
filter(day_type_code == 1 & day_part_code != "00" & day_part_code != "02" & day_part_code != "09" & day_part_code != "19") %>% # Don't include all day, off-peak, peak AM, or peak PM
group_by(id) %>%
mutate(min_spd = min(avg_spd)) %>%
ungroup() %>%
filter(avg_spd == min_spd) # Note that some segments have multiple hours with the same speed that is the min - will cause duplicates
congestion_wkday %>%
ggplot(aes(day_part_desc)) +
geom_bar() +
coord_flip()
congestion_wkday %>%
unite(day_part, day_part_code, day_part_desc) %>%
ggplot(aes(day_part)) +
geom_bar() +
coord_flip()
congestion_dups <- congestion_wkday %>%
group_by(id) %>%
count()
congestion_check <- left_join(congestion_wkday, congestion_dups, by = "id")
congestion_check %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
unite(day_part, day_part_code, day_part_desc) %>%
ggplot(aes(day_part, fill = min_hour_cat)) +
geom_bar() +
coord_flip()
library(plotly)
check_plot <- congestion_check %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
unite(day_part, day_part_code, day_part_desc) %>%
ggplot(aes(day_part, fill = min_hour_cat)) +
geom_bar() +
coord_flip()
plotly(check_plot)
ggplotly(check_plot)
congestion_check %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
arrange(desc(day_part_code)) %>%
ggplot(aes(day_part_desc, fill = min_hour_cat)) +
geom_bar() +
coord_flip()
??fct_reoder
??fct_reorder
congestion_check %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
fct_reorder(day_part_desc, day_part_code) %>%
ggplot(aes(day_part_desc, fill = min_hour_cat)) +
geom_bar() +
coord_flip()
congestion_check %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
fct_reorder(as.factor(day_part_desc), day_part_code) %>%
ggplot(aes(day_part_desc, fill = min_hour_cat)) +
geom_bar() +
coord_flip()
congestion_check %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
mutate(day_part_desc = as.factor(day_part_desc)) %>%
fct_reorder(day_part_desc, day_part_code) %>%
ggplot(aes(day_part_desc, fill = min_hour_cat)) +
geom_bar() +
coord_flip()
class(congestion_check$day_part_desc)
congestion_check %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip()
congestion_check %>%
ungroup() %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip()
class(congestion_check$day_part_code)
congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip()
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
labs(y = "")
ggplotly(check_plot)
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
labs(x = "") +
theme(plot.text = element_text(family = "Tw Cent MT"),
legend.position = "bottom")
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
labs(x = "") +
theme(text = element_text(family = "Tw Cent MT"),
legend.position = "bottom")
ggplotly(check_plot)
library(extrafont)
extrafont::loadfonts()
ggplotly(check_plot)
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cent MT"),
legend.position = "bottom")
ggplotly(check_plot)
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom")
ggplotly(check_plot)
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
scale_fill_brewer(palette = "BuGn") +
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom")
check_plot
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
scale_fill_brewer(palette = "Bu") +
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom")
check_plot
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
scale_fill_brewer(palette = "Bu") +
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom",
plot.background = element_rect(fill = "grey65"),
axis.ticks = element_blank())
check_plot
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
scale_fill_brewer(palette = "Bu") +
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom",
panel.background = element_rect(fill = "grey65"),
axis.ticks = element_blank())
check_plot
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is Min", "Multiple Hours are Min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
scale_fill_brewer(palette = "Bu") +
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom",
panel.background = element_rect(fill = "grey65"),
axis.ticks = element_blank(),
panel.grid = element_blank())
check_plot
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is min", "Multiple Hours are min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar(fill = c("#FFCCFF", "#CCCCFF")) +
coord_flip() +
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom",
panel.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
panel.grid = element_blank())
check_plot
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is min", "Multiple Hours are min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar(aes(fill = c("#FFCCFF", "#CCCCFF"))) +
coord_flip() +
#scale_fill_manual(c("#FFCCFF", "#CCCCFF"))
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom",
panel.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
panel.grid = element_blank())
check_plot
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom",
panel.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
panel.grid = element_blank())
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is min", "Multiple Hours are min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
scale_fill_manual(c("#FFCCFF", "#CCCCFF")) +
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom",
panel.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
panel.grid = element_blank())
check_plot
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One Hour is min", "Multiple Hours are min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
scale_fill_manual(values = c("#FFCCFF", "#CCCCFF")) +
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom",
panel.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
panel.grid = element_blank())
check_plot
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One hour is min", "Multiple hours are min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
scale_fill_manual(values = c("#FFCCFF", "#CCCCFF")) +
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom",
axis.ticks = element_blank(),
panel.grid = element_blank())
check_plot
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One hour is min", "Multiple hours are min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
scale_fill_manual(values = c("#FFCCFF", "#CCCCFF")) +
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom",
axis.ticks = element_blank())
check_plot
check_plot
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One hour is min", "Multiple hours are min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
scale_fill_manual(values = c("#99CC99", "#9999FF")) +
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom",
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid = element_blank())
check_plot
check_plot <- congestion_check %>%
mutate(day_part_code = as.numeric(day_part_code)) %>%
mutate(min_hour_cat = ifelse(n == 1, "One hour is min", "Multiple hours are min")) %>%
ggplot(aes(fct_reorder(day_part_desc, day_part_code), fill = min_hour_cat)) +
geom_bar() +
coord_flip() +
scale_fill_manual(values = c("#FF99FF", "#9999FF")) +
labs(x = "",
fill = "") +
theme(text = element_text(family = "Tw Cen MT"),
legend.position = "bottom",
axis.ticks = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid = element_blank())
check_plot
ggsave("Methodology check", width = 10, height = 6)
ggsave("Methodology check.png", width = 10, height = 6)
congestion_wkday_id <- congestion_wkday %>%
dplyr::select(id, min_spd) %>%
unique()
congestion_wkday_id <- congestion_wkday %>%
group_by(id, min_spd) %>%
summarize(hour_or_hours = paste(day_part_desc, collapse = ", "))
View(congestion_wkday_id)
congestion_full <- left_join(congestion_wkday_id, congestion_dups, by = "id")
View(congestion_full)
congestion_full <- left_join(congestion_wkday_id, congestion_dups, by = "id") %>%
rename(n_min_hours = n)
library(sf)
# Import shapefiles
con_shp_1 <- st_read("82850_CongAnal_1_4500_92519_segment_line.shp")
# Import shapefiles
con_shp_1 <- st_read("Shapefiles/82850_CongAnal_1_4500_92519_segment_line.shp")
con_shp_2 <- st_read("Shapefiles/82851_CongAnal_4501_8995_92519_segment_line.shp")
congestion_shp_1 <- left_join(congestion_full, con_shp_1, by = "id")
View(congestion_shp_1)
congestion_shp_2 <- left_join(congestion_shp_1, con_shp_2, by = "id")
plot(congestion_shp_2)
View(congestion_shp_1)
View(con_shp_1)
View(congestion_shp_1)
congestion_shp_1 <- left_join(con_shp_1, congestion_full, by = "id")
congestion_shp_2 <- left_join(con_shp_2, congestion_full, by = "id")
congestion_shp <- bind_rows(congestion_shp_1, congestions_shp_2)
congestion_shp <- bind_rows(congestion_shp_1, congestion_shp_2)
plot(congestion_shp_2)
library(leaflet)
congestion_shp %>%
leaflet() %>%
addPolylines()
congestion_shp %>%
leaflet() %>%
addPolygons()
leaflet(congestion_shp) %>%
addPolygons()
leaflet(congestion_shp) %>%
addPolygons(color = ~n_min_hours)
st_write(congestion_shp, "Congestion Method Check.shp", "ESRI Shapefile Driver")
congestion_shp <- bind_rows(congestion_shp_1, congestion_shp_2) %>%
unique()
congestion_shp <- rbind(congestion_shp_1, congestion_shp_2)
st_write(congestion_shp, "Congestion Method Check.shp", "ESRI Shapefile Driver")
congestion_shp %>%
leaflet() %>%
addPolygons(fillColor = ~n_min_hours)
congestion_shp %>%
leaflet() %>%
addPolygons(fillColor = ~n_min_hours) %>%
addTiles()
congestion_lab <- congestion_shp %>%
mutate(popup = paste0("Number of hours tied for minimum speed: <strong>", n_min_hours, "</strong><br><strong> Min speed: <strong>", min_spd, "</strong"))
labs <- as.list(congestion_lab$popup)
congestion_lab <- congestion_shp %>%
mutate(popup = paste0("Number of hours tied for minimum speed: <strong>", n_min_hours, "</strong><br><strong> Min speed: <strong>", min_spd, "</strong"))
labs <- as.list(congestion_lab$popup)
congestion_shp %>%
leaflet() %>%
addPolygons(color = ~n_min_hours,
label = lapply(labs, htmltools::HTML)) %>%
addProviderTiles(providers$CartoDB.Positron)
class(congestion_shp$n_min_hours)
congestion_lab <- congestion_shp %>%
mutate(popup = paste0("Number of hours tied for minimum speed: <strong>", n_min_hours, "</strong><br> Min speed: <strong>", min_spd, "</strong"))
labs <- as.list(congestion_lab$popup)
congestion_shp %>%
leaflet() %>%
addPolygons(~colorQuantile("PuBu", n_min_hours, n = 5)(n_min_hours),
label = lapply(labs, htmltools::HTML),
labelOptions = labelOptions(style = list("font-family" = "Segoe UI Light",
"font-size" = "14px"))) %>%
addProviderTiles(providers$CartoDB.Positron)
congestion_shp %>%
leaflet() %>%
addPolygons(color = ~colorQuantile("PuBu", n_min_hours, n = 5)(n_min_hours),
label = lapply(labs, htmltools::HTML),
labelOptions = labelOptions(style = list("font-family" = "Segoe UI Light",
"font-size" = "14px"))) %>%
addProviderTiles(providers$CartoDB.Positron)
congestion_shp %>%
leaflet() %>%
addPolygons(color = ~colorQuantile("PuBu", n_min_hours)(n_min_hours),
label = lapply(labs, htmltools::HTML),
labelOptions = labelOptions(style = list("font-family" = "Segoe UI Light",
"font-size" = "14px"))) %>%
addProviderTiles(providers$CartoDB.Positron)
congestion_shp %>%
leaflet() %>%
addPolygons(color = ~colorNumeric("PuBu", n_min_hours)(n_min_hours),
label = lapply(labs, htmltools::HTML),
labelOptions = labelOptions(style = list("font-family" = "Segoe UI Light",
"font-size" = "14px"))) %>%
addProviderTiles(providers$CartoDB.Positron)
congestion_shp_1 <- left_join(con_shp_1, congestion_wkday, by = "id")
congestion_shp_2 <- left_join(con_shp_2, congestion_wkday, by = "id")
con_wkday_1 <- left_join(con_shp_1, congestion_wkday, by = "id")
con_wkday_2 <- left_join(con_shp_2, congestion_wkday, by = "id")
congestion_wkday_shp <- rbind(con_wkday_1, con_wkday_2) #do NOT use bind_rows
st_write(congestino_wkday_shp, "Congestion Method Check on Off-peak.shp", "ESRI Shapefile Driver")
st_write(congestion_wkday_shp, "Congestion Method Check on Off-peak.shp", "ESRI Shapefile Driver")
